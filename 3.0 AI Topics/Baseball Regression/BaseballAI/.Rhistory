# Load necessary libraries
â€¢ library(tidyverse)
# Load necessary libraries
library(tidyverse)
# Load the dataset.
baseball <- read.table("baseball.txt", header=TRUE)
# Filter players with at_bats >= 100.
baseball <- baseball %>% filter(at_bats >= 100)
# View struct.
str(baseball)
# Scatter plot of home runs vs. batting average
library(ggplot2)
ggplot(baseball, aes(x=bat_ave, y=homeruns)) + geom_point() + labs(title="Home Runs vs. Batting Average", x="Batting Average", y="Home Runs")
# Fit regression model
model <- lm(homeruns ~ bat_ave, data=baseball)
# Summary of the model
summary(model)
# Residual plots
par(mfrow=c(2,2))
plot(model)
# Normal probability plot
qqnorm(residuals(model))
qqline(residuals(model))
plot(model)
plot(model)
# Residual plots
par(mfrow=c(2,2))
plot(model)
# Normal probability plot
qqnorm(residuals(model))
qqline(residuals(model))
# Ensure no missing values
baseball <- baseball %>% filter(!is.na(homeruns))
# Replace zero home runs with a small positive value to avoid log(0) issues
baseball <- baseball %>% mutate(homeruns = ifelse(homeruns == 0, 0.1, homeruns))
# Apply log transformation
baseball <- baseball %>% mutate(ln_homeruns = log(homeruns))
# Fit new regression model
model_ln <- lm(ln_homeruns ~ bat_ave, data=baseball)
# Summary of the new model
summary(model_ln)
# Residual plots for transformed model
par(mfrow=c(2,2))
plot(model_ln)
# Standard error of estimate
s <- summary(model_ln)$sigma
exp(s)
# R-squared value
summary(model_ln)$r.squared
# HYPOTHESIS TESTING
# t-test for regression coefficient
summary(model_ln)$coefficients
# Confidence interval for beta1
confint(model_ln, level=0.95)
# Cook's distance to identify influential points
cooksd <- cooks.distance(model_ln)
plot(cooksd, type="h", main="Cook's Distance for Influential Points")
abline(h = 4/length(cooksd), col="red")
# Loading necessary libraries.
library(tidyverse)
# Loading the dataset.
baseball <- read.table("baseball.txt", header=TRUE)
# Filtering players with at_bats >= 100.
baseball <- baseball %>% filter(at_bats >= 100)
# View struct.
str(baseball)
# Script generates a scatter plot of home runs vs. batting average
library(ggplot2)
ggplot(baseball, aes(x=bat_ave, y=homeruns)) + geom_point() + labs(title="Home Runs vs. Batting Average", x="Batting Average", y="Home Runs")
# Fit regression model
model <- lm(homeruns ~ bat_ave, data=baseball)
# Summary of the model
summary(model)
# Residual plots
par(mfrow=c(2,2))
plot(model)
# Normal probability plot
qqnorm(residuals(model))
qqline(residuals(model))
# Ensure no missing values
baseball <- baseball %>% filter(!is.na(homeruns))
# Replace zero home runs with a small positive value to avoid log(0) issues
baseball <- baseball %>% mutate(homeruns = ifelse(homeruns == 0, 0.1, homeruns))
# Apply log transformation
baseball <- baseball %>% mutate(ln_homeruns = log(homeruns))
# Fit new regression model
model_ln <- lm(ln_homeruns ~ bat_ave, data=baseball)
# Summary of the new model
summary(model_ln)
# Residual plots for transformed model
par(mfrow=c(2,2))
plot(model_ln)
# Standard error of estimate
s <- summary(model_ln)$sigma
exp(s)
# R-squared value
summary(model_ln)$r.squared
# HYPOTHESIS TESTING
# t-test for regression coefficient
summary(model_ln)$coefficients
# Confidence interval for beta1
confint(model_ln, level=0.95)
# Cook's distance to identify influential points
cooksd <- cooks.distance(model_ln)
plot(cooksd, type="h", main="Cook's Distance for Influential Points")
abline(h = 4/length(cooksd), col="red")
